{
    "Odoo OWL Component": {
        "prefix": "odoo-component",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { Component, useState } from \"@odoo/owl\";",
            "import { useService } from \"@web/core/utils/hooks\";",
            "",
            "export class ${1:ComponentName} extends Component {",
            "    static template = \"${2:module_name.ComponentTemplate}\";",
            "    static props = {",
            "        ${3:prop}: { type: String, optional: true },",
            "    };",
            "",
            "    setup() {",
            "        this.orm = useService(\"orm\");",
            "        this.notification = useService(\"notification\");",
            "        this.state = useState({",
            "            ${4:loading}: false,",
            "        });",
            "        $0",
            "    }",
            "}"
        ],
        "description": "Create an Odoo OWL component"
    },
    "Odoo Field Widget": {
        "prefix": "odoo-widget",
        "body": [
            "/** @odoo-module **/",
            "",
            "import { registry } from \"@web/core/registry\";",
            "import { CharField } from \"@web/views/fields/char/char_field\";",
            "",
            "export class ${1:WidgetName} extends CharField {",
            "    static template = \"${2:module_name.WidgetTemplate}\";",
            "",
            "    setup() {",
            "        super.setup();",
            "        $0",
            "    }",
            "}",
            "",
            "registry.category(\"fields\").add(\"${3:widget_name}\", ${1:WidgetName});"
        ],
        "description": "Create an Odoo field widget"
    },
    "Odoo Service Hook": {
        "prefix": "odoo-service",
        "body": [
            "this.${1:serviceName} = useService(\"${1:serviceName}\");"
        ],
        "description": "Use an Odoo service"
    },
    "Odoo ORM Call": {
        "prefix": "odoo-orm",
        "body": [
            "const ${1:result} = await this.orm.call(",
            "    \"${2:model.name}\",",
            "    \"${3:method_name}\",",
            "    [${4:args}],",
            "    {${5:kwargs}}",
            ");"
        ],
        "description": "Make an Odoo ORM call"
    },
    "Odoo State": {
        "prefix": "odoo-state",
        "body": [
            "this.state = useState({",
            "    ${1:property}: ${2:value},",
            "    $0",
            "});"
        ],
        "description": "Create Odoo component state"
    },
    "Odoo Notification": {
        "prefix": "odoo-notify",
        "body": [
            "this.notification.add(\"${1:Message}\", {",
            "    type: \"${2:success}\",",
            "    title: \"${3:Title}\",",
            "});"
        ],
        "description": "Show Odoo notification"
    },
    "Odoo Action": {
        "prefix": "odoo-action",
        "body": [
            "return {",
            "    type: \"ir.actions.act_window\",",
            "    name: \"${1:Action Name}\",",
            "    res_model: \"${2:model.name}\",",
            "    view_mode: \"${3:tree,form}\",",
            "    ${4:domain: []},",
            "    ${5:context: {}},",
            "};"
        ],
        "description": "Create Odoo action"
    },
    "Odoo Module Declaration": {
        "prefix": "odoo-module",
        "body": [
            "/** @odoo-module **/",
            "",
            "$0"
        ],
        "description": "Odoo module declaration"
    }
}
